// объект = контейнер из ключей и свойств = хеш
var obj = new Object();
var obj1 = {
    str: 'ewdc',
    func: function () { this.str = "67i" },
    func1: function () { return this }
}

// объект удобен для хранения и организации данных
// в объект можно вложить другой объект
// для доступа к элементам объкта есть возможность использования двух нотаций:
// точечной:
obj1['str'];
// нотация с использованием квадратных скобок:
obj1.str;

console.log(obj.ggg || "sdfds"); // true

// добавление нового свойства к объекту:
obj1.xxx = "wer";

console.log(obj1);

// ССЫЛКИ
// все объекты передаются по ссылкам, они не копируются
var a = { prop: "we" };
var b = { prop: "rt" };
var b = { prop: "rt" };

a = b = c = { prop: 123 };

console.log(a, b, c);

var y = obj1;

y.str = 345;

console.log(obj1.str); // 345

// delete удаляет только свойства объекта, в свойства прототипа он не лезет
delete obj1.xxx;

console.log(obj1);

// ДОСТУП К ОБЪЕКТУ
// если функция находится в объекте, то она является его методом
console.log(obj1.func1());


// ослабление глобальности помогает избежать множества проблем с другими библиотеками, компонентами

// глобальные объекты не есть хорошо
// констант в js нет
// хорошая практика: 
// 1 создание одной глобальной функции 
// 2 описание всего приложения (все его свойства и методы) в рамках функции
var MYAPP = {}