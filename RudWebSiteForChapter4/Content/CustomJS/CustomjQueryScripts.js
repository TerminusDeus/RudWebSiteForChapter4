
//Возможно привязать событие для еще не созданной кнопки (т.е. кнопка может создаться
//потом, после объявления обработчика, где-то в коде JS). Здесь обработчик привязывается к
//параметру $(...) (в данном случае в document), и затем идет отслеживание дочерних
//элементов в момент возникновения события:
$(document).delegate('.link1', 'click', function (e) { });

// Код который будет выполнен после полной загрузки документа
jQuery(document).ready(function () {

    // ОСНОВНЫЕ СЕЛЕКТОРЫ

    // multiple items selector
    //$("a,ul").css('visibility', 'hidden');
    // применяем новый цвет ко всем ссылочным элементам
    // $("a").css('color', 'chartreuse');
    // this makes all elements with id attribute value equal "nav" invisible
    //$("#nav").css('visibility', 'hidden');
    // adding new attribute to all attributes
    $("*").attr("xxx", Math.random());
    // alert button element xxx attribute value
    $("input[type=button]").click(function () {
        var getvalue = $(this).attr('xxx');
        //alert(getvalue);
    })
    // this changes color of all alements with attribute class value = btn
    $(".btn").css('color', 'chartreuse');


    //__________________________________________________________________________________________________//
    //__________________________________________________________________________________________________//


    // ИЕРАРХИЧЕСКИЕ СЕЛЕКТОРЫ

    /*Выборка всех элементов, которые соответстуют второму селектору и являются дочерними для элементов первого селектора*/
    //$("div[id=header]>p").css('visibility', 'hidden');
    /*Выборка элементов с селектором 'div', которые располагаются непосредственно 
    за элементами 'div[id=nav]'. Причем оба элемента должны находиться на одном уровне*/
    // $("div[id=nav]+div").css('visibility', 'hidden');
    /*Выборка элементов с селектором 'селектор2', которые располагаются на одном уровне с элементами с селектором 'селектор1'.*/
    //$("div[id=nav]~div[id=sidebar]").css('visibility', 'hidden');


    //__________________________________________________________________________________________________//
    //__________________________________________________________________________________________________//


    // СЕЛЕКТОРЫ АТРИБУТОВ

    // [attr] pattern
    // добавление пункта в ul
    $('*[lang=ab]').append('<li><a href="#">ЖЗЛ</a></li>');

    // change standart $ sign to XXX
    //var XXX = jQuery.noConflict();

    // Будут выбраны все :input со значениями атрибута value заканчивающимися на 'меня'
    // $(":input[value$='меня' ]").css('visibility', 'hidden');

    // $(this) pattern
    // $(this) работает с элементами, выбранными селекотором #bar li a, двойной клик по которым меняет их цвет
    // $("#bar li a").dblclick(function(){ $(this).css("color", "red"); });


    //__________________________________________________________________________________________________//
    //__________________________________________________________________________________________________//


    // ЦЕПОЧКИ КОМАНД jQuery

    $(":input").mouseenter(function () {
        $(this).css("color", "red");
    }).mouseleave(function () {
        $(this).css("color", "chartreuse");
    })

    $('*[lang=ab]').append('<input id="Button2" type="button" value="Свернуть" />');

    // сворачивание/разворачивание элементов sidebar
    // show and hide effects usage
    $('#Button2').attr('class', 'btn btn-success').click(function () {
        if ($(this).attr('value') == "Свернуть") {
            $('*[lang=ab] li').hide(400); $(this).attr('value', 'Развернуть');
        }
        else {
            $(this).attr('value', 'Свернуть'); $('*[lang=ab] li').show(1000);
        }
    });

    // все элементы, выделяемые селектором исчезают
    // $('*[lang=ab]').append('<li><a href="#">О погоде</a></li>').hide(5000);

    // скрывает всё (все элементы с visibility = visible, т е все видимые)
    $("#Button1").click(function () {
        $(":visible").css('visibility', 'hidden');
    });

    // Добавление и удаление классов, переключение класса:
    // добавление нескольких классов
    // $('#Button1').addClass('btn btn-toolbar btn btn-danger');
    // удаление определенного класса
    //$('.div1').removeClass('c1');
    //$('.div1').toogleClass('c1');
    //$('.div1').hasClass('c1'); //проверяет есть ли класс у элемента
    //$('.selector').removeClass().addClass('all needed classes');

    // Удаление элементов:
    // $('.d1').remove();
    // $('.d1').empty() - очищает элемент (аналог $('.d1').html(''));

    // Изменение атрибутов и значений элементов:
    // $('. t1 ').attr(' data - x ', 1212);
    // $('. t1 ').removeAttr(' data - x ');

    // Получение и установка значения элемента:
    // var s = $('.t1').html(); $('.t1').html('1111') // для html тегов (span, div и т.д.)
    // var t = $('.t1').val(); $('.t1').val('1111'); // для форм (текстовое поле и т.д)

    // Управление видимостью элементов, как можно скрыть элемент (плавно и сразу)
    // $('.el1').hide(200).addClass('hide').fadeOut(1000);
    // $("div").show().removeClass('hide').fadeIn();

    // меняем стиль элементов a внутри dropdown - списка
    $("#main .dropdown .dropdown-menu li a").css("color", "chartreuse").css('font-size', 'medium').css('font-style', 'oblique');

    //__________________________________________________________________________________________________//
    //__________________________________________________________________________________________________//


    // РАБОТА С SELECT

    // получение значения выбранного элемента
    $("#my_select option:selected").val();
    // сокращенно:
    $("#my_select :selected").val();
    // или:
    $("select#my_select").val();

    $("#Button3").click(function() {
        //alert($("#my_select option:selected").val());
    })

    // установить выбранный элемент в списке
    // $('#my_select option[value=3]').attr('selected', 'selected');
    // более подробно: http://www.webnotes.com.ua/index.php/archives/699


    //__________________________________________________________________________________________________//
    //__________________________________________________________________________________________________//


    // ФИЛЬТРАЦИЯ ВЫБРАННЫХ ЭЛЕМЕНТОВ

    // Фильтрует набор элементов, оставляя только те, которые удовлетворяют селектору selector
    // $("div").filter("#footer"); // вернет div-элементы с id = footer

    //Фильтрует набор элементов c помощью заданной функции. Эта функция вызывается отдельно, 
    //для каждого из выбранных элементов. Если она возвращает true, то текущий элемент будет
    //включен в конечный результат. Сами элементы доступны в функции, в переменной this, а их 
    //порядковые номера в наборе — в переменной index.

    //На первом шаге $('li') вышеуказанная конструкция выбирает все элементы li из текущего документа 
    //и возвращает их в виде объекта jQuery. На следующем этапе к текущей выборке применяется фильтр 
    //    (.filter( function(index) {return index % 2 === 0;})), содержащий функцию, которая тестирует 
    //    каждый элемент текущей выборки с помощью кода (тела) этой функции и отбирает из неё только те элементы,
    //    для которых функция возвратила истинное значение (true). После этого данный метод (.filter())
    //    конструирует новый объект jQuery, в который помещает только выбранные элементы, т.е. те для которых
    //    тест прошёл успешно (функция вернула значение true).

    //$('li').filter(function (index) {
    //    return index % 2 === 0;
    //});


    // .filter(DOM-элементы) позволяет в качестве параметра использовать DOM-элемент или коллекцию DOM-элементов.
    // данный метод будет выбирать из текущей выборки только те элементы, которые соответствуют DOM-элементам, указанным в качестве параметра.

    //В первой части конструкции $("li") выбираются все элементы li из текущего документа и возвращаются в виде 
    //объекта jQuery. Во второй части представленной выше конструкции к текущей выборке применяется фильтр 
    //    .filter(document.querySelectors("li:first-child")), который из первоначальной выборки выбирает 
    //    только элементы li, являющиеся первым ребёнком своего родителя. После этого данный метод конструирует 
    //    новый объект jQuery, в который помещает все выбранные элементы.
    // $("li").filter(document.querySelectors("li:first-child"));

    // более подробно https://itchief.ru/lessons/javascript/jquery-method-filter


    //__________________________________________________________________________________________________//
    //__________________________________________________________________________________________________//


    // parent, closest, find
    // $("div.item").parent(); // выбрать всех непосредственных родителей для .item

    // $("div.item").closest('.cont'); // ближайший из тех, кто попадает под критерий

    // $(".s1").find(".item") // или 
    // $(".item", this); // найти среди текущих элементов в цепочке (т.е.
    // мы задаем контекст поиска элементов в рамках определенной группы, а не во всем html).
    // контекст селекторов != множественному селектору
    // $("#bar", "div#sidebar").css('visibility', 'hidden');



    // изменить цвет фона страницы на белый
    // $(document.body).css("background", "white");

    // Cобытие для флажка или select:
    $('.ch').change(function(){});

    $(':input:checkbox').keypress(function(e){
        alert(e.which);
        console.log(e); // f12 / console - смотрим объект e
    });


});

document.getElementById("change").innerHTML = "Данное содержимое было изменено с помощью JavaScript.";


// Лучше всего весь код jQuery запускать из функции загрузки страницы:
//// Предотвращение преждевременного выполнения кода в jQuery:
////Первый способ:
//$(document).ready(function () {
//    //Код который будет выполнен после полной загрузки документа
//});

////Второй способ:
//$().ready(function () {
//    //Код который будет выполнен после полной загрузки документа
//});

////Третий способ:
//$(function () {
//    //Код который будет выполнен после полной загрузки документа
//});